{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","Cardlist","_ref","robots","cardArray","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this3","arr","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAiBeA,EAfJ,SAACC,GACR,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACfH,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAAMQ,GAAhC,gBAEtBP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,MACXR,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,UCQAC,EAfE,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,OAETC,EAAUD,EAAOE,IAAI,SAACC,EAAKC,GAC7B,OACChB,EAAAC,EAAAC,cAACe,EAAD,CAAOV,GAAIK,EAAOI,GAAGT,GAAIW,IAAKF,EAAGR,KAAMI,EAAOI,GAAGR,KAAMC,MAAOG,EAAOI,GAAGP,UAG7E,OACIT,EAAAC,EAAAC,cAAA,WACCW,ICAMM,EATE,SAAAR,GAAkB,IAAhBS,EAAgBT,EAAhBS,aAGf,OACIpB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCACjBkB,KAAK,SACLC,YAAY,gBAAgBC,SAAUH,KCE/BI,EARF,SAACzB,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAACC,UAAW,SAASC,OAAQ,kBAAmBC,OAAQ,UAC/D7B,EAAM8B,WCuCAC,cAvCf,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcRI,eAAe,SAACC,GACZR,EAAKS,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAdxCZ,EAAKa,MAAM,CACPhC,OAAO,GACP6B,YAAY,KAJFV,mFASC,IAAAc,EAAAX,KACfY,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAE5B,OAAQsC,uCAM/B,IAAAC,EAAAjB,KACEkB,EAAIlB,KAAKU,MAAMhC,OAAOyC,OAAO,SAAAzC,GAC/B,OAAOA,EAAOJ,KAAK8C,cAAcC,SAASJ,EAAKP,MAAMH,YAAYa,iBAEtE,OAA8B,IAA3BpB,KAAKU,MAAMhC,OAAO4C,OACVxD,EAAAC,EAAAC,cAAA,qBAGNF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACuD,EAAD,CAAWhB,YAAaP,KAAKO,YAAarB,aAAcc,KAAKI,iBAC7DtC,EAAAC,EAAAC,cAACwD,EAAD,KACA1D,EAAAC,EAAAC,cAACyD,EAAD,CAAW/C,OAAQwC,aA/BjBQ,mBCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MACYC,SAASC,eAAe,SDwH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.c7a35779.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card=(props) =>{\n    return(\n        <div className='bg-light-green dib br3 ma2 grow tc'>\n        <div>\n    <img alt='robots' src={`https://robohash.org/${props.id}>?200*200`} />\n   </div>\n   <div>\n     <h2>{props.name}</h2>\n     <p>{props.email}</p>        \n                            \n                            </div>\n    </div>\n    \n    )\n}\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst Cardlist = ({robots}) =>{\n    \n    const cardArray=robots.map((user,i)=>{\n        return(\n         <Card  id={robots[i].id} key={i} name={robots[i].name} email={robots[i].email} />\n        )\n    })\n    return(\n        <div>\n        {cardArray}\n        </div> \n    )\n  \n}\n\nexport default Cardlist;","import React from 'react'\n\n\nconst SearchBox= ({searchChange})=>{\n\n    \n    return(\n        <input className='pa3 ba b--green bg-lightest-blue'\n        type=\"search\"\n        placeholder='search robots' onChange={searchChange}/>\n    )\n}\nexport default SearchBox","import React from 'react'\n\n\nconst Scroll=(props)=>{\n    return (\n        <div style={{overflowY: 'scroll',border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n        )\n}\n\nexport default Scroll","import React, {Component} from 'react';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\n\nclass App extends Component {\n    constructor() {\n        super()\n    this.state={\n        robots:[],\n        searchfield:\" \"\n\n    }\n}\n\ncomponentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({ robots: users}))\n}\n\nonSearchChange=(event)=>{\n    this.setState({searchfield:event.target.value})\n                 }\n    render(){\n        const arr=this.state.robots.filter(robots=>{\n            return(robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\n       })\n       if(this.state.robots.length===0){\n           return <h1>Loading</h1>\n       } else{\n        return(\n            <div className=\"tc\">    \n                <h1>Robofriends</h1>\n                <SearchBox searchfield={this.searchfield} searchChange={this.onSearchChange}/>\n                <Scroll>\n                <Cardlist  robots={arr} />\n                </Scroll>\n                \n                \n            </div>\n        )\n       }\n    }\n    }\n    export default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App'\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, \n                            document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}